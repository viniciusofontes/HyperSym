! GetPathResults -----------------------------------------------------------
! Article: Fontes, V.O., Leit√£o, A.X., & Pereira, A. (2023). 
!          HyperSym: a Matlab code for symbolic differentiation of 
!          ready-to-use tensors in hyperelastic finite element analysis, 
!          Computer Applications in Engineering Education.
!          DOI: https://doi.org/xx.xxxx/xxxxxx-xxx-xxxx-x
!
! References:
! [1] Kim, N.-H. (2014). Introduction to Nonlinear Finite Element analysis.
!     Springer Science & Business Media, pp. 214-216.
! [2] Oden, J.T. (1972). Finite Elements of Nonlinear Continua, Courier 
!     Corporation, pp. 304-308.
! -------------------------------------------------------------------------

/POST1

! Results in a Path -------------------------------------------------------------------------------------------------------------------------------------------
SET,LAST
PathPts = Ne+1

! Along horizontal path =======================================================================================================================================
NSEL,S,LOC,Y,0
NSEL,R,LOC,Z,0
*GET,NNode,NODE,,COUNT
*GET,nd,NODE,,NUM,MIN

*DIM,LowerPath,ARRAY,NNode,11

*DO,a,1,NNode
	LowerPath(a,1) = NX(nd)
	LowerPath(a,2) = NY(nd)
	LowerPath(a,3) = NZ(nd)
	
	*GET,LowerPath(a,4),NODE,nd,S,X
	*GET,LowerPath(a,5),NODE,nd,S,Y
	*GET,LowerPath(a,6),NODE,nd,S,Z
	*GET,LowerPath(a,7),NODE,nd,S,XY
	*GET,LowerPath(a,8),NODE,nd,S,YZ
	*GET,LowerPath(a,9),NODE,nd,S,XZ
	*GET,LowerPath(a,10),NODE,nd,S,EQV
	*GET,LowerPath(a,11),NODE,nd,S,INT
		
	nd = NDNEXT(nd)     ! next node number in the selected set
*ENDDO

! The matrix must be ordered to save the correct '.txt' file
*DIM,Ordering,,NNode    ! ordering index array
*MOPER,Ordering(1),LowerPath(1,1),SORT,,1   ! ordering column

NSEL,S,LOC,Y,L/2
NSEL,R,LOC,Z,0
*GET,NNode,NODE,,COUNT
*GET,nd,NODE,,NUM,MIN

*DIM,UpperPath,ARRAY,NNode,11

*DO,a,1,NNode
	UpperPath(a,1) = NX(%nd%)
	UpperPath(a,2) = NY(%nd%)
	UpperPath(a,3) = NZ(%nd%)
	
	*GET,UpperPath(a,4),NODE,nd,S,X
	*GET,UpperPath(a,5),NODE,nd,S,Y
	*GET,UpperPath(a,6),NODE,nd,S,Z
	*GET,UpperPath(a,7),NODE,nd,S,XY
	*GET,UpperPath(a,8),NODE,nd,S,YZ
	*GET,UpperPath(a,9),NODE,nd,S,XZ
	*GET,UpperPath(a,10),NODE,nd,S,EQV
	*GET,UpperPath(a,11),NODE,nd,S,INT
		
	nd = NDNEXT(nd)     ! next node number in the selected set
*ENDDO

! The matrix must be ordered to save the correct '.txt' file
*DIM,Ordering,,NNode    ! ordering index array
*MOPER,Ordering(1),UpperPath(1,1),SORT,,1

! Along vertical path =========================================================================================================================================
NSEL,S,LOC,X,0
NSEL,R,LOC,Z,0
*GET,NNode,NODE,,COUNT
*GET,nd,NODE,,NUM,MIN

*DIM,LeftPath,ARRAY,NNode,11

*DO,a,1,NNode
	LeftPath(a,1) = NX(%nd%)
	LeftPath(a,2) = NY(%nd%)
	LeftPath(a,3) = NZ(%nd%)
	
	*GET,LeftPath(a,4),NODE,nd,S,X
	*GET,LeftPath(a,5),NODE,nd,S,Y
	*GET,LeftPath(a,6),NODE,nd,S,Z
	*GET,LeftPath(a,7),NODE,nd,S,XY
	*GET,LeftPath(a,8),NODE,nd,S,YZ
	*GET,LeftPath(a,9),NODE,nd,S,XZ
	*GET,LeftPath(a,10),NODE,nd,S,EQV
	*GET,LeftPath(a,11),NODE,nd,S,INT
		
	nd = NDNEXT(nd)     ! next node number in the selected set
*ENDDO

! The matrix must be ordered to save the correct '.txt' file
*DIM,Ordering,,NNode    ! ordering index array
*MOPER,Ordering(1),LeftPath(1,1),SORT,,2

NSEL,S,LOC,X,L/2
NSEL,R,LOC,Z,0
*GET,NNode,NODE,,COUNT
*GET,nd,NODE,,NUM,MIN

*DIM,RightPath,ARRAY,NNode,11

*DO,a,1,NNode
	RightPath(a,1) = NX(nd)
	RightPath(a,2) = NY(nd)
	RightPath(a,3) = NZ(nd)
	
	*GET,RightPath(a,4),NODE,nd,S,X
	*GET,RightPath(a,5),NODE,nd,S,Y
	*GET,RightPath(a,6),NODE,nd,S,Z
	*GET,RightPath(a,7),NODE,nd,S,XY
	*GET,RightPath(a,8),NODE,nd,S,YZ
	*GET,RightPath(a,9),NODE,nd,S,XZ
	*GET,RightPath(a,10),NODE,nd,S,EQV
	*GET,RightPath(a,11),NODE,nd,S,INT
		
	nd = NDNEXT(nd)     ! next node number in the selected set
*ENDDO

! The matrix must be ordered to save the correct '.txt' file
*DIM,Ordering,,NNode    ! ordering index array
*MOPER,Ordering(1),RightPath(1,1),SORT,,2

! Write data in specific file:
! Along horizontal path =========================================================================================================
*CFOPEN,'Results_LowerHorStress_%MatModel%','txt'
*VWRITE,'Path along x-axis'
%17S
*VWRITE,'Tx','Ty','Tz','Txy','Tyz','Txz','TMises','TInt'
%7S %7S %7S %7S %7S %7S %7S %7S
*VWRITE,LowerPath(1,4),LowerPath(1,5),LowerPath(1,6),LowerPath(1,7),LowerPath(1,8),LowerPath(1,9),LowerPath(1,10),LowerPath(1,11)
%7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F
*CFCLOSE

*CFOPEN,'Results_UpperHorStress_%MatModel%','txt'
*VWRITE,'Path along x-axis'
%17S
*VWRITE,'Tx','Ty','Tz','Txy','Tyz','Txz','TMises','TInt'
%7S %7S %7S %7S %7S %7S %7S %7S
*VWRITE,UpperPath(1,4),UpperPath(1,5),UpperPath(1,6),UpperPath(1,7),UpperPath(1,8),UpperPath(1,9),UpperPath(1,10),UpperPath(1,11)
%7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F
*CFCLOSE

! Along vertical path ===========================================================================================================
*CFOPEN,'Results_LeftVertStress_%MatModel%','txt'
*VWRITE,'Path along y-axis'
%17S
*VWRITE,'Tx','Ty','Tz','Txy','Tyz','Txz','TMises','TInt'
%7S %7S %7S %7S %7S %7S %7S %7S
*VWRITE,LeftPath(1,4),LeftPath(1,5),LeftPath(1,6),LeftPath(1,7),LeftPath(1,8),LeftPath(1,9),LeftPath(1,10),LeftPath(1,11)
%7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F
*CFCLOSE

*CFOPEN,'Results_RightVertStress_%MatModel%','txt'
*VWRITE,'Path along y-axis'
%17S
*VWRITE,'Tx','Ty','Tz','Txy','Tyz','Txz','TMises','TInt'
%7S %7S %7S %7S %7S %7S %7S %7S
*VWRITE,RightPath(1,4),RightPath(1,5),RightPath(1,6),RightPath(1,7),RightPath(1,8),RightPath(1,9),RightPath(1,10),RightPath(1,11)
%7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F %7.4F
*CFCLOSE

! Equilibrium Path ================================================================================
*GET,Tmax,ACTIVE,,SET,NSET
*DIM,lbd,ARRAY,Tmax+1,1
*DIM,Disp,ARRAY,Tmax+1,3,NN
*DIM,Coord,ARRAY,3,NN

*CFOPEN,'Results_Eq_Path_%MatModel%','txt'

*DO,nd,1,NN,1
	*DO,t,1,Tmax+1,1
		*IF,t,EQ,1,THEN                     ! stores initial data (which is not a substep)
			lbd(t) = 0
			
			*DO,i,1,3,1
				Disp(t,i,nd) = 0
			*ENDDO
		*ELSE
			SET,1,t-1
			*GET,lbd(t),ACTIVE,,SET,TIME    ! sets the time
			
			Disp(t,1,nd) = UX(NN%nd%)
			Disp(t,2,nd) = UY(NN%nd%)
			Disp(t,3,nd) = UZ(NN%nd%)
		*ENDIF
	*ENDDO
	
	Coord(1,nd) = NX(NN%nd%)
	Coord(2,nd) = NY(NN%nd%)
	Coord(3,nd) = NZ(NN%nd%)
	
	*VWRITE,'Node:','X','Y','Z'
%7S %8S %8S %8S
	*VWRITE,'     ',Coord(1,nd),Coord(2,nd),Coord(3,nd)
%7S %8.4F %8.4F %8.4F
	*VWRITE,'******'
%6S
	*VWRITE,'lambda','UX','UY','UZ'
%7S %8S %8S %8S
	*VWRITE,lbd(1),Disp(1,1,nd),Disp(1,2,nd),Disp(1,3,nd)
%7.4F %8.4F %8.4F %8.4F

	*IF,nd,EQ,NN,EXIT    ! skips and mantains the last substep
	*VWRITE,'------'
%6S
*ENDDO

*CFCLOSE