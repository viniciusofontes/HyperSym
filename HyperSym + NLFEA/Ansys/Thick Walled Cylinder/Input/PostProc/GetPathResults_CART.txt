! GetPathResults_CART ------------------------------------------------------
! Article: Fontes, V.O., Leit√£o, A.X., & Pereira, A. (2023). 
!          HyperSym: a Matlab code for symbolic differentiation of 
!          ready-to-use tensors in hyperelastic finite element analysis, 
!          Computer Applications in Engineering Education.
!          DOI: https://doi.org/xx.xxxx/xxxxxx-xxx-xxxx-x
!
! References:
! [1] Kim, N.-H. (2014). Introduction to Nonlinear Finite Element Analysis.
!     Springer Science & Business Media, pp. 214-216.
! [2] ANSYS, Inc. (2021). Ansys Mechanical APDL Verification Manual, 
!     pp. 157-158. Example VM56: Hyperelastic Thick Cylinder Under Internal
!     Pressure.
! [3] Oden, J.T. (1972). Finite Elements of Nonlinear Continua, Courier 
!     Corporation, pp. 325-331.
! -------------------------------------------------------------------------

! Results in a Path -----------------------------------------------------------------------------------------------------------------------
SET,LAST

LOCAL,11,CART,0,0,0,45 ! creates a local coordinate system (rotates 45 degrees)

CSYS,11                ! activates the local coordinate system
NSEL,S,LOC,Y,0 
CM,NodalStress,NODE    ! creates a group containing the nodes where the data will be stored

RSYS,1                 ! activates the coordinate system (cylindrical, here)

! Along radial path =======================================================================================================================
CMSEL,S,NodalStress
NSEL,R,LOC,Z,0

*GET,NNode,NODE,,COUNT
*GET,nd,NODE,,NUM,MIN

*DIM,BottomPath,ARRAY,NNode,11

*DO,a,1,NNode
	BottomPath(a,1) = NX(nd)
	BottomPath(a,2) = NY(nd)
	BottomPath(a,3) = NZ(nd)
	
	*GET,BottomPath(a,4),NODE,nd,S,X
	*GET,BottomPath(a,5),NODE,nd,S,Y
	*GET,BottomPath(a,6),NODE,nd,S,Z
	*GET,BottomPath(a,7),NODE,nd,S,XY
	*GET,BottomPath(a,8),NODE,nd,S,YZ
	*GET,BottomPath(a,9),NODE,nd,S,XZ
	*GET,BottomPath(a,10),NODE,nd,S,EQV
	*GET,BottomPath(a,11),NODE,nd,S,INT
		
	nd = NDNEXT(nd)     ! next node number in the selected set
*ENDDO

! The matrix must be ordered to save the correct '.txt' file
*DIM,Ordering,,NNode    ! ordering index array
*MOPER,Ordering(1),BottomPath(1,1),SORT,,1,2     ! ordering column

CMSEL,S,NodalStress
NSEL,R,LOC,Z,h

*GET,NNode,NODE,,COUNT
*GET,nd,NODE,,NUM,MIN

*DIM,TopPath,ARRAY,NNode,11

*DO,b,1,NNode
	TopPath(b,1) = NX(nd)
	TopPath(b,2) = NY(nd)
	TopPath(b,3) = NZ(nd)
	
	*GET,TopPath(b,4),NODE,nd,S,X
	*GET,TopPath(b,5),NODE,nd,S,Y
	*GET,TopPath(b,6),NODE,nd,S,Z
	*GET,TopPath(b,7),NODE,nd,S,XY
	*GET,TopPath(b,8),NODE,nd,S,YZ
	*GET,TopPath(b,9),NODE,nd,S,XZ
	*GET,TopPath(b,10),NODE,nd,S,EQV
	*GET,TopPath(b,11),NODE,nd,S,INT
		
	nd = NDNEXT(nd)     ! next node number in the selected set
*ENDDO

! The matrix must be ordered to save the correct '.txt' file
*DIM,Ordering,,NNode    ! ordering index array
*MOPER,Ordering(1),TopPath(1,1),SORT,,1,2

! Write data in specific file:
! Along radial path =======================================================================================================================
*CFOPEN,'Results_BottomStress_%MatModel%_CART','txt'
*VWRITE,'Path along radial path'
%22S
*VWRITE,'Tx','Ty','Tz','Txy','Tyz','Txz','TMises','TInt'
%10S %10S %10S %10S %10S %10S %10S %10S
*VWRITE,BottomPath(1,4),BottomPath(1,5),BottomPath(1,6),BottomPath(1,7),BottomPath(1,8),BottomPath(1,9),BottomPath(1,10),BottomPath(1,11)
%10.4F %10.4F %10.4F %10.4F %10.4F %10.4F %10.4F %10.4F
*CFCLOSE

*CFOPEN,'Results_TopStress_%MatModel%_CART','txt'
*VWRITE,'Path along radial path'
%22S
*VWRITE,'Tx','Ty','Tz','Txy','Tyz','Txz','TMises','TInt'
%10S %10S %10S %10S %10S %10S %10S %10S
*VWRITE,TopPath(1,4),TopPath(1,5),TopPath(1,6),TopPath(1,7),TopPath(1,8),TopPath(1,9),TopPath(1,10),TopPath(1,11)
%10.4F %10.4F %10.4F %10.4F %10.4F %10.4F %10.4F %10.4F
*CFCLOSE

! Equilibrium Path ========================================================================================================================
*GET,Tmax,ACTIVE,,SET,NSET
*DIM,lbd,ARRAY,Tmax+1,1
*DIM,Disp,ARRAY,Tmax+1,3,2
*DIM,Coord,ARRAY,3,2

*CFOPEN,'Results_Eq_Path_%MatModel%_CART','txt'

*DO,nd,1,2,1
	*DO,t,1,Tmax+1,1
		*IF,t,EQ,1,THEN                     ! stores initial data (which is not a substep)
			lbd(t) = 0
			
			*DO,i,1,3,1
				Disp(t,i,nd) = 0
			*ENDDO
		*ELSE
			SET,1,t-1
			*GET,lbd(t),ACTIVE,,SET,TIME    ! sets the time
			
			Disp(t,1,nd) = UX(NN%nd%)
			Disp(t,2,nd) = UY(NN%nd%)
			Disp(t,3,nd) = UZ(NN%nd%)
		*ENDIF
	*ENDDO
	
	Coord(1,nd) = NX(NN%nd%)
	Coord(2,nd) = NY(NN%nd%)
	Coord(3,nd) = NZ(NN%nd%)
	
	*VWRITE,'Node:','X','Y','Z'
%7S %8S %8S %8S
	*VWRITE,'     ',Coord(1,nd),Coord(2,nd),Coord(3,nd)
%7S %8.4F %8.4F %8.4F
	*VWRITE,'******'
%6S
	*VWRITE,'lambda','UX','UY','UZ'
%7S %8S %8S %8S
	*VWRITE,lbd(1),Disp(1,1,nd),Disp(1,2,nd),Disp(1,3,nd)
%7.4F %8.4F %8.4F %8.4F

	*IF,nd,EQ,NN,EXIT    ! skips and mantains the last substep
	*VWRITE,'------'
%6S
*ENDDO

*CFCLOSE